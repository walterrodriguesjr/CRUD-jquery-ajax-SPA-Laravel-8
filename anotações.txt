https://www.youtube.com/watch?v=s54q5uVaT5I&t=14s

CONFIGURAÇÃO DO SISTEMA E STORE

1-instalado o projeto laravel via composer 
    composer create-project laravel/laravel:^8.0 CRUD-jquery-ajax-laravel-8

2-criado via artisan, a model, migration e controller de 'Student'. Tudo no mesmo comando.
    php artisan make:model Student -mc

3-configurada a 'model' 'Student'. O objeto 'students' foi inserido na variável '$table'.
    Foi criado a variável '$fillable' e dentro inserido as colunas desta model que podem ser trabalhadas. (convenção)

4-configurada a 'migration' 'create_students_table', inserindo os dados e tipos de dados que irão ser montados na tabela. 
    rodada a migration 
        php artisan migrate

5-criado o banco de dados deste projeto em 'phpmyadmin'
    db = crud_jquery_alax_laravel-8

6-configurado em 'web.php' a 'routes' 'index' de 'StudentController', usando o 'get'.

7-em 'StudentController', foi criada a função 'index', a qual é chamada pela 'route' 'get'

8-a pasta 'student' foi criada dentro da pasta 'views'. Em seguida, criado o arquivo 'index.blade.php'

9-a pasta 'layouts' foi criada dentro da pasta 'views'. Em seguida, criado o arquivo 'app.blade.php'
    dentro de 'app.blade.php', foi criado todo o template padrão de view, esta recebe por yield, o que é inserido em index.blade.php (esquema de template), 
        esta também é quem recebe todas as bibliotecas, links e scripts. Enviando para 'index.blade.php' 

10- configurado 'index.blade.php', recebendo componentes e bibliotecas de 'app.blade.php'

11 - em 'index.blade.php', dentro de '@section('content'), foram inseridas as 'tags' HTML 
    
12 - nos scripts de 'index.blade.php', criado a var 'data', um array que recebe os dados do input 

13 - inserido e, 'index' o token padrão do laravel para trafegar dados via ajax

14 - em index, foi criado um ajax do tipo post para submeter dados de /students 

15 - criada a 'route' de post chamando o método 'store,' dos dados dos students 

16 - modal já salvando dados no banco 

17-inserindo as tag da table (colunas, linhas e botões de edit e delete) dentro do card-body HTML

18-criada a função 'fetchstudent()' que busca os dados já salvo no banco e os trás para o usuário 

19-criada a 'route' de get, que chama a função 'fetchstudent', que traz os dados do banco para a view

20-feito a ação via ajax, usando o GET, em index, para trazer os dados enviados pelo back-end por response()

21-criado em seguida a função 'each' que utiliza os dados enviados pelo back-end via 'response' e, através 
    de um loop, traz os dados direto na tabela, usando os objetos de 'response.students' dentro de 'item'

22-






